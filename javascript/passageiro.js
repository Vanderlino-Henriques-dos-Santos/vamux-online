import app from "./firebase-config.js";
import { getDatabase, ref, push, set, onValue, off } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-database.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-auth.js";

const database = getDatabase(app);
const auth = getAuth(app);

// DECLARE ESTAS VARI√ÅVEIS NO TOPO DO SEU ARQUIVO JS
let map; // Objeto do mapa do Google Maps
let directionsService; // Servi√ßo para calcular rotas
let directionsRenderer; // Servi√ßo para exibir rotas no mapa
let distanciaKm = 0; // Dist√¢ncia da corrida em km
let valorCorrida = 0; // Valor estimado da corrida
let marcadorMotorista = null; // Marcador para a posi√ß√£o do motorista
let idCorridaAtual = null; // ID da corrida atual
let passageiroUid = null; // UID do passageiro logado
let corridaListener = null; // Listener para monitorar o status da corrida

// Monitora o estado de autentica√ß√£o do Firebase para obter o UID do passageiro
onAuthStateChanged(auth, (user) => {
    if (user) {
        passageiroUid = user.uid;
        console.log("Passageiro logado:", passageiroUid);
        // Tenta inicializar o mapa se a API do Google Maps j√° estiver pronta
        if (typeof google === 'object' && typeof google.maps === 'object' && typeof google.maps.Map === 'function') {
            initPassengerMap();
        }
    } else {
        // Se n√£o estiver logado, redireciona para a p√°gina de login
        window.location.href = "login.html?tipo=passageiro";
    }
});

/**
 * Inicializa o mapa do Google Maps para a interface do passageiro.
 * Esta fun√ß√£o √© chamada pela fun√ß√£o global initMap() no HTML,
 * garantindo que a API do Google Maps esteja totalmente carregada.
 */
export function initPassengerMap() {
    // Evita reinicializar o mapa se ele j√° estiver pronto
    if (map) {
        console.log("Mapa do passageiro j√° inicializado. Pulando.");
        return;
    }

    // Verifica se a API do Google Maps est√° realmente carregada antes de tentar us√°-la
    if (typeof google === 'undefined' || typeof google.maps === 'undefined' || typeof google.maps.Map === 'undefined') {
        console.error("‚ùå Google Maps API n√£o est√° pronta para inicializar o mapa do passageiro.");
        return;
    }

    console.log("üìç initPassengerMap (Passageiro) executada para configurar o mapa!");

    // Inicializa os servi√ßos de rota
    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer();

    // Posi√ß√£o inicial do mapa (centro de S√£o Paulo)
    const center = { lat: -23.55052, lng: -46.633308 };
    const mapDiv = document.getElementById("map"); // Obt√©m o elemento div do mapa

    // Verifica se o div do mapa existe no HTML
    if (!mapDiv) {
        console.error("‚ùå Div #map n√£o encontrada no HTML do passageiro!");
        return;
    }

    try {
        // Cria o objeto do mapa
        map = new google.maps.Map(mapDiv, {
            zoom: 13,
            center: center,
            mapTypeId: 'roadmap' // Define o tipo de mapa como ruas
        });
        directionsRenderer.setMap(map); // Associa o renderizador de rotas ao mapa
        console.log("‚úÖ Mapa do passageiro inicializado com sucesso!");
    } catch (error) {
        console.error("‚ùå ERRO ao criar o objeto Map do Google Maps para o passageiro:", error);
    }
}

/**
 * Calcula e exibe a rota entre o local de partida e destino inseridos pelo passageiro.
 */
window.calcularRota = function () {
    if (!map) {
         exibirMensagemStatus("‚ö†Ô∏è O mapa ainda n√£o carregou completamente. Tente novamente em instantes.", "orange");
         return;
    }
    const partida = document.getElementById('partida').value.trim();
    const destino = document.getElementById('destino').value.trim();

    if (!partida || !destino) {
        exibirMensagemStatus("‚ö†Ô∏è Preencha partida e destino!", "orange");
        return;
    }

    const request = {
        origin: partida,
        destination: destino,
        travelMode: google.maps.TravelMode.DRIVING, // Modo de viagem: carro
    };

    directionsService.route(request, (result, status) => {
        if (status === "OK") {
            directionsRenderer.setDirections(result); // Exibe a rota no mapa

            const rota = result.routes[0].legs[0];
            distanciaKm = rota.distance.value / 1000; // Dist√¢ncia em KM

            // F√≥rmula de c√°lculo de valor: Bandeirada (5) + Pre√ßo por Km (2)
            valorCorrida = 5 + (distanciaKm * 2);

            document.getElementById('infoCorrida').innerHTML =
                `üõ£Ô∏è Dist√¢ncia: ${distanciaKm.toFixed(2)} km <br>üí∞ Valor estimado: R$ ${valorCorrida.toFixed(2)}`;
            exibirMensagemStatus("‚úÖ Rota calculada com sucesso!", "lime");

            map.setCenter(rota.start_location); // Centraliza o mapa na origem da rota


        } else {
            exibirMensagemStatus("‚ùå Erro ao calcular rota: " + status, "red");
            console.error("Erro ao calcular rota:", status);
        }
    });
};

/**
 * Solicita uma nova corrida ao Firebase, criando um novo registro.
 */
window.chamarCorrida = function () {
    if (!passageiroUid) {
        exibirMensagemStatus("‚ùå Erro: Passageiro n√£o logado.", "red");
        return;
    }
    if (!map) {
         exibirMensagemStatus("‚ö†Ô∏è O mapa ainda n√£o carregou completamente. Tente novamente em instantes.", "orange");
         return;
    }

    if (distanciaKm === 0 || valorCorrida === 0) {
        exibirMensagemStatus("‚ö†Ô∏è Calcule a rota antes de chamar a corrida!", "orange");
        return;
    }

    const partida = document.getElementById('partida').value.trim();
    const destino = document.getElementById('destino').value.trim();

    const corridasRef = ref(database, 'corridas');
    const novaCorrida = push(corridasRef); // Cria um novo n√≥ com um ID √∫nico

    idCorridaAtual = novaCorrida.key; // Armazena o ID da corrida para acompanhamento

    set(novaCorrida, {
        status: "pendente",
        passageiroUid: passageiroUid, // ID do passageiro logado
        partida: partida,
        destino: destino,
        distancia_km: distanciaKm,
        valor: valorCorrida,
        motoristaUid: null, // Ser√° preenchido quando um motorista aceitar
        timestampSolicitacao: new Date().toISOString()
    })
        .then(() => {
            exibirMensagemStatus("üöó Corrida solicitada! Aguardando motorista...", "lime");
            acompanharCorridaEParadeiroMotorista(idCorridaAtual); // Come√ßa a monitorar a corrida
        })
        .catch((error) => {
            console.error("‚ùå Erro ao chamar corrida:", error);
            exibirMensagemStatus("‚ùå Erro ao chamar corrida: " + error.message, "red");
        });
};

/**
 * Acompanha o status da corrida em tempo real e, se aceita, o paradeiro do motorista.
 * @param {string} corridaId - ID da corrida a ser monitorada.
 */
function acompanharCorridaEParadeiroMotorista(corridaId) {
    // Remove listener anterior se houver para evitar duplica√ß√£o
    if (corridaListener) {
        off(corridaListener);
    }

    corridaListener = onValue(ref(database, 'corridas/' + corridaId), (snapshot) => {
        const corrida = snapshot.val();

        if (corrida) {
            if (corrida.status === "aceita" && corrida.motoristaUid) {
                exibirMensagemStatus("‚úÖ Motorista encontrado! A caminho...", "lime");
                acompanharLocalizacaoMotorista(corrida.motoristaUid); // Come√ßa a monitorar a localiza√ß√£o do motorista
            } else if (corrida.status === "finalizada") {
                exibirMensagemStatus("üèÅ Corrida finalizada! Obrigado por usar VAMUX.", "lime");
                // Limpa o mapa e marcadores ap√≥s a finaliza√ß√£o
                directionsRenderer.set('directions', null);
                if (marcadorMotorista) {
                    marcadorMotorista.setMap(null);
                    marcadorMotorista = null;
                }
                off(corridaListener); // Para de monitorar a corrida
                idCorridaAtual = null; // Reseta o ID da corrida
                document.getElementById('infoCorrida').innerHTML = ''; // Limpa informa√ß√µes da corrida
            }
        } else {
            exibirMensagemStatus("‚ÑπÔ∏è Corrida n√£o encontrada ou cancelada.", "orange");
            off(corridaListener); // Para de monitorar se a corrida sumir
            idCorridaAtual = null;
        }
    });
}

/**
 * Acompanha a localiza√ß√£o do motorista em tempo real no mapa.
 * @param {string} motoristaUid - UID do motorista.
 */
function acompanharLocalizacaoMotorista(motoristaUid) {
    const localizacaoRef = ref(database, 'motoristasOnline/' + motoristaUid);

    onValue(localizacaoRef, (snapshot) => {
        const dados = snapshot.val();
        if (dados && dados.latitude && dados.longitude) {
            const pos = { lat: dados.latitude, lng: dados.longitude };

            if (marcadorMotorista) {
                marcadorMotorista.setPosition(pos); // Atualiza a posi√ß√£o do marcador existente
            } else {
                // Cria um novo marcador para o motorista
                marcadorMotorista = new google.maps.Marker({
                    position: pos,
                    map: map,
                    icon: "http://maps.gstatic.com/mapfiles/ms/icons/car.png", // √çcone de carro
                    title: "Motorista VAMUX"
                });
            }
            // Opcional: Centralizar o mapa no motorista, mas pode ser desorientador para o passageiro
            // map.setCenter(pos);
        } else {
            // Se o motorista sair do ar ou parar de enviar localiza√ß√£o, remove o marcador
            if (marcadorMotorista) {
                marcadorMotorista.setMap(null);
                marcadorMotorista = null;
            }
            // N√£o exibe mensagem de erro aqui, pois a corrida ainda pode estar "aceita" aguardando o motorista iniciar a rota
        }
    });
}

/**
 * Exibe mensagens de status na interface do passageiro.
 * @param {string} texto - A mensagem a ser exibida.
 * @param {string} cor - A cor do texto (padr√£o: "lime").
 */
function exibirMensagemStatus(texto, cor = "lime") {
    const mensagem = document.getElementById('mensagemStatus');
    if (mensagem) {
        mensagem.innerHTML = texto;
        mensagem.style.color = cor;
    }
}